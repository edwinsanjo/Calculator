import Head from 'next/head'
import Image from 'next/image'
import { useReducer } from 'react';

const reducer = (state, action) => {
  switch (action.type) {
    case "ADD_DIGIT":
      if (action.digit === "0" && state.current === "0") {
        return state
      }
      if (action.digit === "." && state.current.includes(".")) {
        return state
      }
      if (state.overwrite) {
        return {
          ...state,
          current: action.payload.digit,
          overwrite: false
        }
      }
      return { ...state, current: `${state.current || ""}${action.payload.digit}` };

    case "ADD_OPERATOR":
      if (state.current === null && state.previous === null) {
        return state
      }
      if (state.previous == null) {
        return {
          ...state,
          operation: action.payload.operator,
          previous: state.current,
          current: null,
        }
      }
      if (state.current == null) {
        return {
          ...state,
          operation: action.payload.operator,
          previous: state.previous,
        }
      }
      return {
        ...state,
        previous: evaluate(state),
        operation: action.payload.operator,
        current: null
      };

    case "EQUALS":
      if (state.current == null || state.previous == null) return state
      evaluate(state)
      return {
        ...state,
        previous: null,
        operation: null,
        overwrite: true,
        current: evaluate(state),
      };

    case "CLEAR":
      return {};

    case "BACKSPACE":
      if (state.overwrite) {
        return {
          ...state,
          overwrite: false,
          current: null
        }
      }
      if (state.current.length == 1) {
        return {...state, current: null}
      }
      return {
        ...state,
        current: state.current.slice(0, -1)
      }

    default:
      return state;
  }
};

const evaluate = (state) => {
  let previousNumber = parseFloat(state.previous);
  let currentNumber = parseFloat(state.current);
  if (isNaN(previousNumber) || isNaN(currentNumber)) {
    return "";
  }
  let computatuion = "";
  switch (state.operation) {
    case "+":
      computatuion = previousNumber + currentNumber;
      break;
    case "-":
      computatuion = previousNumber - currentNumber;
      break;
    case "x":
      computatuion = previousNumber * currentNumber;
      break;
    case "÷":
      computatuion = previousNumber / currentNumber;
      break;
  }
  return computatuion.toString();
}

export default function Home() {

  const [{ current, previous, operation }, dispatch] = useReducer(reducer, {});

  return (
    <div className='bg-gradient-to-r from-[#000020] to-[#000000] min-h-screen'>
      <Head>
        <title>Calculator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='flex justify-center'>

        <div className='rounded-xl mt-20 shadow-lg p-4 bg-[#510086]'>
          <div className='bg-indigo-900 rounded p-4'>
            <p className='text-white text-right text-lg'>{previous || `⠀`} {operation}</p>
            <h1 className='text-white text-4xl text-right'>{current || 0}</h1>
          </div>

          <div className='grid grid-cols-4 gap-4 mt-4'>


            <button className='btn col-span-2' onClick={() => { dispatch({ type: "CLEAR" }) }}>AC</button>
            <button className='btn col-span-1' onClick={() => { dispatch({ type: "BACKSPACE" }) }}>C</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_OPERATOR", payload: { operator: "÷" } }) }}>÷</button>

            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "1" } }) }}>1</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "2" } }) }}>2</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "3" } }) }}>3</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_OPERATOR", payload: { operator: "x" } }) }}>x</button>

            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "4" } }) }}>4</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "5" } }) }}>5</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "6" } }) }}>6</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_OPERATOR", payload: { operator: "-" } }) }}>-</button>

            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "7" } }) }}>7</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "8" } }) }}>8</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "9" } }) }}>9</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_OPERATOR", payload: { operator: "+" } }) }}>+</button>

            <button className='btn col-span-2' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "0" } }) }}>0</button>
            <button className='btn' onClick={() => { dispatch({ type: "ADD_DIGIT", payload: { digit: "." } }) }}>.</button>
            <button className='btn' onClick={() => { dispatch({ type: "EQUALS" }) }}>=</button>


          </div>

        </div>

      </div>

    </div>
  )
}
